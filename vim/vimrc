call plug#begin($HOME . '/.local/share/nvim/plugged')

" # Theme
" Plug 'jeffkreeftmeijer/vim-dim'
Plug 'joshdick/onedark.vim'
Plug 'chriskempson/base16-vim'
Plug 'vwxyutarooo/nerdtree-devicons-syntax'

Plug 'mhinz/vim-startify' " fancy vim bootscreen
Plug 'itchyny/lightline.vim' " simple powerline tool

Plug 'wakatime/vim-wakatime'
Plug 'machakann/vim-highlightedyank' " highlights yanked lines

Plug 'tpope/vim-dispatch' " maybe i do need it for dispatch unittest
Plug 'janko/vim-test' " quick test execution

" Plug 'ervandew/supertab'
Plug 'rking/ag.vim'
Plug 'swekaj/php-foldexpr.vim'

" Navigation
Plug 'christoomey/vim-tmux-navigator' " tmux like pane switching ctrl + hjkl
Plug 'majutsushi/tagbar' " code outliner
Plug 'yuttie/comfortable-motion.vim'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'wincent/ferret' " <leader> + a 

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Asynchronous linting for every languages
Plug 'neomake/neomake'

" Commenting out
Plug 'tpope/vim-commentary' " gcc

" [],(), {}, <> Auto Sourrinding mapping, Try cs"'
" Plug 'tpope/vim-surround'

" Language
Plug 'sheerun/vim-polyglot' " A collection of language packs for Vim

" Git Wrapper for Vim
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'

Plug 'joonty/vdebug'
Plug 'stephpy/vim-php-cs-fixer', {'for': 'php'} " <leader> + pcf
Plug 'adoy/vim-php-refactoring-toolbox', {'for': 'php'}

Plug 'tobyS/pdv' " php Documentor der schon etwas älter ist

" Auto completion
Plug 'ludovicchabant/vim-gutentags', {'for': 'php'}
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'

Plug 'phpactor/phpactor', { 'do': ':call phpactor#Update()', 'for': 'php'}
Plug 'phpactor/ncm2-phpactor', {'for': 'php'}

" Distraction free writing // Zenmode
" Plug 'junegunn/goyo.vim'
Plug 'ryanoasis/vim-devicons'
call plug#end()            " required

filetype plugin indent on    " required
" That bell is the worst sound. Shut it the fuck off.
set visualbell

" General Config
" ==============
let mapleader="\<space>"
nmap <leader><leader> :nohlsearch<cr>
" set gcr=a:blinkon0              " Disable cursor blink
set splitright                  " Opens vertical split right of current window
set splitbelow                  " Opens horizontal split below current window
set shortmess=filnxtToOI        " see :help shortmess
" set statusline+=%{gutentags#statusline()}

" Set relevant filetypes
au BufRead,BufNewFile *.md set filetype=markdown

" Appearance
" ==========

" "Syntax highlighting should be in 256 colors
" Limit line-length to 80 columns by highlighting col 81
if exists("+colorcolumn")
    set colorcolumn=121
endif

set cursorline " Highlight current line

" Show current line and column position in file
" Show file title in terminal tab
set title
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
" let g:onedark_termcolors=256
" set background=dark
set t_Co=256t 
" colorscheme onedark

if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif
" Sanity Config (Don't edit text like an animal)
" ==============================================

set relativenumber              " prefer absolute #
set backspace=indent,eol,start  " Allow backspace in insert mode
set listchars=space:·,nbsp:·,trail:·,precedes:«,extends:»,tab:▸·,eol:¬
" set list
set autowrite
set hidden                      " Buffers can exist in the background
" Allow motions and back-spacing over line-endings etc
set whichwrap=h,l,b,<,>,~,[,]

"Don't dump distracting text to terminal during searches!
set shellpipe=2>/dev/null>
set re=1                        "Use a non-broken regex engine for syntax highlighting

" INTERACTIONS

" Start scrolling slightly before the cursor reaches an edge
set scrolloff=3
set sidescrolloff=5
set sidescroll=1

set iskeyword+=- "Makes foo-bar considered one word
set iskeyword+=$

" Indentation and Display
" =======================

filetype plugin indent on

set shiftwidth=4
set smartindent " show existing tab with 4 spaces width
set tabstop=4
" " when indenting with '>', use 4 spaces width
set shiftwidth=4
" " On pressing tab, insert 4 spaces
set expandtab
" when at 3 spaces, and I hit > ... go to 4, not 7
set shiftround

set number
set breakindent " Make word wrapping behave like it does in every other sane text editor
" set wrap linebreak
set nowrap

" Turn Off Swap Files
" ===================
set noswapfile
set nobackup
set nowritebackup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Persistent Undo
" ===============

" Keep undo history across sessions, by storing in file
set undofile

" Use the system clipboard
set clipboard^=unnamed,unnamedplus

" Change the cursor shape while in insert-mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Remove the delay when escaping from insert-mode
set timeoutlen=1000 ttimeoutlen=0

" Enable mouse support
set mouse=a

" Search Settings
" ===============

set ignorecase       " Ignore case when searching...
set smartcase        " ...except if we input a capital letter

" Folds
" =====
set foldmethod=indent   " Fold based on indent
set foldnestmax=3       " Deepest fold is 3 levels
set nofoldenable        " Don't fold by default

" Plugin Options
" ==============
set linespace=1
set noshowmode " Le  airline handle the mode display

let g:indentLine_char = '┆'
let g:indentLine_enabled = 1

" Custom commands
" ===============
map <leader>rr :source $MYVIMRC<CR>

" close the buffer
nmap <leader>q :bdelete!<cr>
nmap <c-s> :w!<cr>

" FZF
nmap <Leader>; :Buffers<CR>
nnoremap <c-p> :FZF<cr>
" nmap <Leader>ff :Files<CR>
nmap <Leader>ft :Tags<CR>
nmap <Leader>fh :History<CR>

" Include use statement
nmap <Leader>u :call phpactor#UseAdd()<CR>

" Invoke the context menu
nmap <Leader>mm :call phpactor#ContextMenu()<CR>

" Invoke the navigation menu
nmap <Leader>nn :call phpactor#Navigate()<CR>

" Goto definition of class or class member under the cursor
nmap <Leader>o :call phpactor#GotoDefinition()<CR>

" Show brief information about the symbol under the cursor
nmap <Leader>K :call phpactor#Hover()<CR>

" Transform the classes in the current file
nmap <Leader>tt :call phpactor#Transform()<CR>

" Generate a new class (replacing the current file)
nmap <Leader>cc :call phpactor#ClassNew()<CR>

" Extract expression (normal mode)
nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>

" Extract expression from selection
vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>

" Extract method from selection
" vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>

" arrow keys resize windows
nnoremap <Left> :vertical resize -5<CR>
nnoremap <Right> :vertical resize +5<CR>
nnoremap <Up> :resize -5<CR>
nnoremap <Down> :resize +5<CR>

" deactivate arrow keys
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" keymaps for vim-test
nnoremap <Leader>tf :TestFile<CR>
nnoremap <Leader>tt :TestSuite<CR>
nnoremap <Leader>tn :TestNearest<CR>
" nnoremap <Leader>tl :TestLast<CR>

tnoremap <Esc> <C-\><C-n> " escape terminal mode 

let g:comfortable_motion_scroll_down_key = "j"
let g:comfortable_motion_scroll_up_key = "k"

noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(20)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-20)<CR>

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()
" autocmd BufWritePost *.php silent! call PhpCsFixerFixFile()

" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

" let g:python3_host_prog='/usr/local/bin/python3'
" let g:php_cs_fixer_cache = ".php_cs.cache" " options: --cache-file
let g:php_cs_fixer_config_file = '.php_cs'
let g:php_cs_fixer_verbose = 1
let g:neomake_php_phpcs_args_standard = 'PSR12'
let g:neomake_php_enabled_makers = ['phpcs', 'phpmd', 'php', 'phpstan']

" Neomake signs in the gutter
let g:neomake_error_sign = {'text': '', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign = {
            \   'text': '',
            \   'texthl': 'NeomakeWarningSign',
            \ }
let g:neomake_message_sign = {
            \   'text': '',
            \   'texthl': 'NeomakeWarningSign',
            \ }
let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}

" update neomake when save file
if isdirectory($HOME . "/.local/share/nvim/plugged/neomake")
    " on write
    " call neomake#configure#automake('w')
    call neomake#configure#automake('nrwi', 500)
endif

" display warning for phpcs error
function! SetWarningType(entry)
    let a:entry.type = 'W'
endfunction

function! SetErrorType(entry)
    let a:entry.type = 'E'
endfunction

function! SetMessageType(entry)
    let a:entry.type = 'M'
endfunction

let g:neomake_php_php_maker = {
            \ 'args': ['-l', '-d', 'display_errors=1', '-d', 'log_errors=0',
            \      '-d', 'xdebug.cli_color=0'],
            \ 'errorformat':
            \ '%-GNo syntax errors detected in%.%#,'.
            \ '%EParse error: %#syntax error\, %m in %f on line %l,'.
            \ '%EParse error: %m in %f on line %l,'.
            \ '%EFatal error: %m in %f on line %l,'.
            \ '%-G\s%#,'.
            \ '%-GErrors parsing %.%#',
            \ 'output_stream': 'stdout',
            \ 'postprocess': function('SetErrorType'),
            \ }

let g:gutentags_cache_dir = $HOME . "/.local/share/nvim/gutentags"

let g:vdebug_options = {
            \    'port' : 9000,
            \    'timeout' : 20,
            \    'server' : '',
            \    'on_close' : 'stop',
            \    'break_on_open' : 0,
            \    'ide_key' : '',
            \    'debug_window_level' : 0,
            \    'debug_file_level' : 0,
            \    'debug_file' : '',
            \    'path_maps' : {},
            \    'watch_window_style' : 'compact',
            \    'marker_default' : '⬦',
            \    'marker_closed_tree' : '▸',
            \    'marker_open_tree' : '▾',
            \    'sign_breakpoint' : '▷',
            \    'sign_current' : '▶',
            \    'continuous_mode'  : 1
            \}


" Put this function at the very end of your vimrc file.

function! PhpSyntaxOverride()
    " Put snippet overrides in this function.
    hi! link phpDocTags phpDefine
    hi! link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END

" Dollar is part of the variable // color wise
let php_var_selector_is_identifier=1

hi phpUseNamespaceSeparator guifg=#808080 guibg=NONE gui=NONE
hi phpClassNamespaceSeparator guifg=#808080 guibg=NONE gui=NONE

syn match phpParentOnly "[()]" contained containedin=phpParent
hi phpParentOnly guifg=#f08080 guibg=NONE gui=NONE


augroup ncm2
    au!
    autocmd BufEnter * call ncm2#enable_for_buffer()
    au User Ncm2PopupOpen set completeopt=noinsert,menuone,noselect
    au User Ncm2PopupClose set completeopt=menuone
augroup END

" parameter expansion for selected entry via Enter
" inoremap <silent> <expr> <CR> pumvisible()
"

" cycle through completion entries with tab/shift+tab
inoremap <expr> <TAB> pumvisible() ? "\<c-n>" : "\<TAB>"
inoremap <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<TAB>"

let g:startify_lists = [
            \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
            \ { 'type': 'sessions',  'header': ['   Sessions']       },
            \ { 'type': 'commands',  'header': ['   Commands']       },
            \ { 'type': 'files',     'header': ['   MRU']            },
            \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
            \ ]

let g:startify_bookmarks = [
            \ {'core': '/Volumes/Development/Projects/tickeos/core/readme.md'},
            \ {'vi': '$MYVIMRC'},
            \]

let g:startify_commands = [
            \ {'rt': ['rebuild', '!./rebuild.sh -d']},
            \ {'cc': ['clear cache', '!./clear_cache.sh']},
            \ {'cu': ['composer update', '!env COMPOSER=composer.customized.json composer update --prefer-source']},
            \ ]

            " \ {'ct': ['customize test', '!bin/customize.sh \? test dev dev']},

" nerdtree configuration

function! NERDTreeToggleInCurDir()
    " If NERDTree is open in the current buffer
    if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
        exe ":NERDTreeClose"
    else
        if (expand("%:t") != '')
            exe ":NERDTreeFind"
        else
            exe ":NERDTreeToggle"
        endif
    endif
endfunction

nmap <leader>n :call NERDTreeToggleInCurDir()<CR>

" don't display informations (type ? for help and so on)
let g:NERDTreeMinimalUI = 1
" don't replace the native vim file explorer
let g:NERDTreeHijackNetrw = 1
" let g:NERDTreeChDirMode = 2
" let g:NERDTreeAutoDeleteBuffer = 1
" let g:NERDTreeShowBookmarks = 0
" let g:NERDTreeCascadeOpenSingleChildDir = 1
" let g:NERDTreeCascadeSingleChildDir = 0
" let g:NERDTreeQuitOnOpen = 1

" change the arrows
" let g:NERDTreeDirArrowExpandable = ''
" let g:NERDTreeDirArrowCollapsible = ''

let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:webdevicons_enable_startify = 1

" remapping - see nerdtree.txt and search for "NERDTreeMappings"
let NERDTreeMapOpenSplit = 'b'
let NERDTreeMapPreviewSplit='gb'

let NERDTreeMapOpenVSplit = 'v'
let NERDTreeMapPreviewVSplit='gv'
let g:NERDTreeMouseMode=3

" Restore cursor position when opening file
autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \   execute "normal! g`\"" |
            \ endif

let g:vdebug_features = { 'max_children': 4028 }
" let g:vdebug_features['max_depth'] = 32

let g:neomake_php_phpstan_maker = {
            \ 'args': ['analyse', '--error-format', 'raw', '--no-progress', '--level', '6'],
            \ 'errorformat': '%W%f:%l:%m',
            \ 'postprocess': function('SetWarningType'),
            \ }

let test#strategy = "neovim"

let g:FerretExecutableArguments = {
            \   'rg': '--max-columns 4096'
            \ }
let g:lightline = { 'colorscheme' : 'onedark'}


set tags^=./.git/tags;

" You can set up fzf window using a Vim command (Neovim or latest Vim 8 required)
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }
